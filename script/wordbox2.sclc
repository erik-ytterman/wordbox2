import scala.io.Source
import scala.util.Random

// Load present word database from text file and turn it into a list
val words = Source.fromFile("./src/main/resources/wordlists/Swedish/ord.utf8").getLines.toArray
val gamesize = 4

// Filter out words of desired length (4)
val random = new Random(System.currentTimeMillis)
val valid = words.filter(_.length == gamesize).toList.map(_.toUpperCase)

// Create list containing the playfield state, one string per pow in the playfield
var gamestate = List[String]()

// Anonymouns accessor functions to expose the result
var rows = () => { gamestate }: List[String] 
var columns = () => { gamestate.transpose.map( _.foldLeft("")(_ + _) ) }: List[String]

// Recursive solution finding function
def gamesolver(state: List[String] = List[String]()): Boolean = {

  if(state.length < gamesize) {

    for(word <- random.shuffle(valid)) {
      val newstate = state ::: List(word)

      var columnfilters = newstate.transpose.map( _.foldLeft("")(_ + _) )
      var columnwords = columnfilters.map( columnfilter => valid.filter( _.startsWith(columnfilter) ) )
      var isvalidcolumn = columnwords.map(! _.isEmpty )
      var isvalidword = isvalidcolumn.reduce(_ && _)

      if( isvalidword ) { if( gamesolver(newstate) )  { return true } }
    }

    return false

  } else {
    gamestate = state

    return true
  }
}

